// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MtdKey.OrderMaker.Entity;

#nullable disable

namespace MtdKey.OrderMaker.Entity.Migrations
{
    [DbContext(typeof(OrderMakerContext))]
    [Migration("20231001160342_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApproval", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<byte[]>("ImgApproved")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_approved");

                    b.Property<string>("ImgApprovedText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_approved_text");

                    b.Property<string>("ImgApprovedType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_approved_type");

                    b.Property<byte[]>("ImgIteraction")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_iteraction");

                    b.Property<string>("ImgIteractionText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_iteraction_text");

                    b.Property<string>("ImgIteractionType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_iteraction_type");

                    b.Property<byte[]>("ImgRejected")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_rejected");

                    b.Property<string>("ImgRejectedText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_rejected_text");

                    b.Property<string>("ImgRejectedType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_rejected_type");

                    b.Property<byte[]>("ImgRequired")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_required");

                    b.Property<string>("ImgRequiredText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_required_text");

                    b.Property<string>("ImgRequiredType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_required_type");

                    b.Property<byte[]>("ImgStart")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_start");

                    b.Property<string>("ImgStartText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_start_text");

                    b.Property<string>("ImgStartType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_start_type");

                    b.Property<byte[]>("ImgWaiting")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_waiting");

                    b.Property<string>("ImgWaitingText")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img_waiting_text");

                    b.Property<string>("ImgWaitingType")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("img_waiting_type");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasDatabaseName("fk_approvel_form_idx");

                    b.ToTable("mtd_approval", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalRejection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color")
                        .HasDefaultValueSql("'green'");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_data");

                    b.Property<string>("ImgType")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("img_type");

                    b.Property<int>("MtdApprovalStageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_approval_stage_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdApprovalStageId")
                        .HasDatabaseName("fk_rejection_stage_idx");

                    b.HasIndex("Sequence")
                        .HasDatabaseName("ix_sequence");

                    b.ToTable("mtd_approval_rejection", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalResolution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color")
                        .HasDefaultValueSql("'green'");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_data");

                    b.Property<string>("ImgType")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("img_type");

                    b.Property<int>("MtdApprovalStageId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_approval_stage_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdApprovalStageId")
                        .HasDatabaseName("fk_resolution_stage_idx");

                    b.HasIndex("Sequence")
                        .HasDatabaseName("ix_sequence");

                    b.ToTable("mtd_approval_resolution", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("BlockParts")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("block_parts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("MtdApproval")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_approval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<int>("Stage")
                        .HasColumnType("int(11)")
                        .HasColumnName("stage");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdApproval")
                        .HasDatabaseName("fk_stage_approval_idx");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_USER");

                    b.ToTable("mtd_approval_stage", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdCategoryForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("parent");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("Parent")
                        .HasDatabaseName("fk_group_themself_idx");

                    b.ToTable("mtd_category_form", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdConfigFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("mediumblob")
                        .HasColumnName("file_data");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("file_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_config_file", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdConfigParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_config_param", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdEventSubscribe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("EventCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("event_create")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EventEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("event_edit")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_unique");

                    b.HasIndex("MtdFormId")
                        .HasDatabaseName("fk_mtd_event_mtd_form_idx");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_id");

                    b.ToTable("mtd_event_subscribe", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idUser");

                    b.Property<string>("MtdFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form");

                    b.Property<int>("Page")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("page")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("page_size")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("SearchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("searchNumber");

                    b.Property<string>("SearchText")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("searchText");

                    b.Property<sbyte>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("show_date")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ShowNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("show_number")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Sort")
                        .HasColumnType("text")
                        .HasColumnName("sort");

                    b.Property<string>("SortOrder")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("IdUser")
                        .HasDatabaseName("IX_INDEX_USER");

                    b.HasIndex("MtdFormId")
                        .HasDatabaseName("mtd_filter_mtd_form_idx");

                    b.ToTable("mtd_filter", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("MtdFilter")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_filter");

                    b.Property<string>("MtdFormPartFieldId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_part_field");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFilter")
                        .HasDatabaseName("mtd_filter_column_idx");

                    b.HasIndex("MtdFormPartFieldId")
                        .HasDatabaseName("mtd_roster_field_idx");

                    b.ToTable("mtd_filter_column", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterDate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime")
                        .HasColumnName("date_start");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_filter_date", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int>("MtdFilter")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_filter");

                    b.Property<string>("MtdFormPartFieldId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_part_field");

                    b.Property<int>("MtdTerm")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_term");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("value");

                    b.Property<string>("ValueExtra")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("value_extra");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFilter")
                        .HasDatabaseName("mtd_filter_idx");

                    b.HasIndex("MtdFormPartFieldId")
                        .HasDatabaseName("mtd_filter_field_mtd_form_field_idx");

                    b.HasIndex("MtdTerm")
                        .HasDatabaseName("mtd_filter_field_term_idx");

                    b.ToTable("mtd_filter_field", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterOwner", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_filter_owner", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("MtdFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("script");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasDatabaseName("fk_script_filter_idx");

                    b.ToTable("mtd_filter_script", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterScriptApply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<int>("MtdFilterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_filter_id");

                    b.Property<int>("MtdFilterScriptId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_filter_script_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFilterId")
                        .HasDatabaseName("fk_script_filter_apply1_idx");

                    b.HasIndex("MtdFilterScriptId")
                        .HasDatabaseName("fk_script_filter_apply2_idx");

                    b.ToTable("mtd_filter_script_apply", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("MtdCategory")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("VisibleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("visible_date")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("VisibleNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("visible_number")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdCategory");

                    b.ToTable("mtd_form", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormDesk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ColorBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color_back")
                        .HasDefaultValueSql("'gray'");

                    b.Property<string>("ColorFont")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("color_font")
                        .HasDefaultValueSql("'white'");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<int>("ImageSize")
                        .HasColumnType("int(11)")
                        .HasColumnName("image_size");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("image_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_form_desk", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<int>("ImageSize")
                        .HasColumnType("int(11)")
                        .HasColumnName("image_size");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("image_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_form_header", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("MtdFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form");

                    b.Property<int>("MtdSysStyle")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_sys_style");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasDatabaseName("fk_mtd_form_part_mtd_form1_idx");

                    b.HasIndex("MtdSysStyle")
                        .HasDatabaseName("fk_mtd_form_part_mtd_sys_style1_idx");

                    b.ToTable("mtd_form_part", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPartField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("DefaultData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasColumnName("default_data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("MtdFormPartId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_part");

                    b.Property<int>("MtdSysType")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_sys_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<sbyte>("ReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("read_only")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("required")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFormPartId")
                        .HasDatabaseName("fk_mtd_form_part_field_mtd_form_part1_idx");

                    b.HasIndex("MtdSysType")
                        .HasDatabaseName("fk_mtd_form_part_field_mtd_sys_type1_idx");

                    b.ToTable("mtd_form_part_field", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPartHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("mediumblob")
                        .HasColumnName("image");

                    b.Property<int>("ImageSize")
                        .HasColumnType("int(11)")
                        .HasColumnName("image_size");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("image_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_form_part_header", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormRelated", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ChildFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("child_form_id");

                    b.Property<string>("ParentFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("parent_form_id");

                    b.HasKey("Id");

                    b.HasIndex("ChildFormId")
                        .HasDatabaseName("fk_child_form_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("ParentFormId")
                        .HasDatabaseName("fk_parent_form_idx");

                    b.ToTable("mtd_form_related", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_group", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdLogApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(512)")
                        .HasColumnName("app_comment");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("mediumblob")
                        .HasColumnName("img_data");

                    b.Property<string>("ImgType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("img_type");

                    b.Property<sbyte>("IsSign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("is_sign")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_store");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(512)")
                        .HasColumnName("note");

                    b.Property<int>("Result")
                        .HasColumnType("int(11)")
                        .HasColumnName("result");

                    b.Property<int>("Stage")
                        .HasColumnType("int(11)")
                        .HasColumnName("stage");

                    b.Property<DateTime>("Timecr")
                        .HasColumnType("datetime")
                        .HasColumnName("timecr");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name")
                        .HasDefaultValueSql("'No Name'");

                    b.Property<string>("UserRecipientId")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_recipient_id");

                    b.Property<string>("UserRecipientName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_recipient_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdStore")
                        .HasDatabaseName("fk_log_approval_store_idx");

                    b.HasIndex("Stage")
                        .HasDatabaseName("fk_log_approval_stage_idx");

                    b.ToTable("mtd_log_approval", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdLogDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_store");

                    b.Property<DateTime>("TimeCh")
                        .HasColumnType("datetime")
                        .HasColumnName("timech");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdStore")
                        .HasDatabaseName("fk_log_document_store_idx");

                    b.HasIndex("TimeCh")
                        .HasDatabaseName("ix_date");

                    b.ToTable("mtd_log_document", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_policy", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("change_date")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ChangeOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("change_owner")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Create")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("create")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("delete_all")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("delete_group")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("delete_own")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("edit_all")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("edit_group")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("edit_own")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ExportToExcel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("export_to_excel")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form");

                    b.Property<string>("MtdPolicy")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_policy");

                    b.Property<sbyte>("OwnDenyGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("own_deny_group")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("RelatedCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("related_create")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("RelatedEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("related_edit")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Reviewer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("reviewer")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_all")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_group")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view_own")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasDatabaseName("fk_policy_forms_form_idx");

                    b.HasIndex("MtdPolicy")
                        .HasDatabaseName("fk_policy_forms_policy_idx");

                    b.HasIndex("MtdPolicy", "MtdForm")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE_FORM");

                    b.ToTable("mtd_policy_forms", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Create")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("create")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Edit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("edit")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdFormPart")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form_part");

                    b.Property<string>("MtdPolicy")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_policy");

                    b.Property<sbyte>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("view")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFormPart");

                    b.HasIndex("MtdPolicy", "MtdFormPart")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE_PART");

                    b.ToTable("mtd_policy_parts", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyScripts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<int>("MtdFilterScriptId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mtd_filter_script_id");

                    b.Property<string>("MtdPolicyId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_policy_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("Unique_id");

                    b.HasIndex("MtdPolicyId");

                    b.HasIndex("MtdFilterScriptId", "MtdPolicyId")
                        .IsUnique()
                        .HasDatabaseName("Unique_Policy_Script");

                    b.ToTable("mtd_policy_scripts", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStore", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MtdFormId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("mtd_form");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sequence")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("Timecr")
                        .HasColumnType("datetime")
                        .HasColumnName("timecr");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasDatabaseName("fk_mtd_store_mtd_form1_idx");

                    b.HasIndex("Timecr")
                        .HasDatabaseName("IX_TIMECR");

                    b.HasIndex("MtdFormId", "Sequence")
                        .IsUnique()
                        .HasDatabaseName("Seq_Unique");

                    b.ToTable("mtd_store", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreApproval", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("complete")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("LastEventTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_event_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MtdApproveStage")
                        .HasColumnType("int(11)")
                        .HasColumnName("md_approve_stage");

                    b.Property<string>("PartsApproved")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("parts_approved");

                    b.Property<int>("Result")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("result")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("SignChain")
                        .HasColumnType("longtext")
                        .HasColumnName("sign_chain");

                    b.HasKey("Id");

                    b.HasIndex("Complete")
                        .HasDatabaseName("IX_APPROVED");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("MtdApproveStage")
                        .HasDatabaseName("fk_store_approve_stage_idx");

                    b.ToTable("mtd_store_approval", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Result")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Result" }, "IX_DATE_RESULT");

                    b.ToTable("mtd_store_date");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreDecimal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Result")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Result" }, "IX_DECIMAL_RESULT");

                    b.ToTable("mtd_store_decimal");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Result")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.ToTable("mtd_store_file");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreInt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Result" }, "IX_INT_RESULT");

                    b.ToTable("mtd_store_int");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreMemo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Result" }, "IX_MEMO_RESULT");

                    b.ToTable("mtd_store_memo");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreOwner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_USER");

                    b.ToTable("mtd_store_owner", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Result" }, "IX_TEXT_RESULT");

                    b.ToTable("mtd_store_text");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_sys_style", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sign");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_sys_term", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("active")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE");

                    b.ToTable("mtd_sys_type", (string)null);
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApproval", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdApproval")
                        .HasForeignKey("MtdForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvel_form");

                    b.Navigation("MtdFormNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalRejection", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdApprovalStage", "MtdApprovalStage")
                        .WithMany("MtdApprovalRejection")
                        .HasForeignKey("MtdApprovalStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rejection_stage");

                    b.Navigation("MtdApprovalStage");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalResolution", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdApprovalStage", "MtdApprovalStage")
                        .WithMany("MtdApprovalResolution")
                        .HasForeignKey("MtdApprovalStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resolution_stage");

                    b.Navigation("MtdApprovalStage");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalStage", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdApproval", "MtdApprovalNavigation")
                        .WithMany("MtdApprovalStages")
                        .HasForeignKey("MtdApproval")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stage_approval");

                    b.Navigation("MtdApprovalNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdEventSubscribe", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdForm")
                        .WithMany("MtdEventSubscribes")
                        .HasForeignKey("MtdFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_event_mtd_form");

                    b.Navigation("MtdForm");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilter", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFilter")
                        .HasForeignKey("MtdFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_filter_mtd_form");

                    b.Navigation("MtdFormNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterColumn", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterColumns")
                        .HasForeignKey("MtdFilter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_filter_column_mtd_field");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterColumn")
                        .HasForeignKey("MtdFormPartFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_roster_field");

                    b.Navigation("MtdFilterNavigation");

                    b.Navigation("MtdFormPartFieldNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterDate", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilter", "IdNavigation")
                        .WithOne("MtdFilterDate")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdFilterDate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_date_filter");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterField", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterFields")
                        .HasForeignKey("MtdFilter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_filter_field_mtd_field");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdFormPartFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_filter_field_mtd_form_field");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdSysTerm", "MtdTermNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdTerm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mtd_filter_field_mtd_term");

                    b.Navigation("MtdFilterNavigation");

                    b.Navigation("MtdFormPartFieldNavigation");

                    b.Navigation("MtdTermNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterOwner", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilter", "IdNavigation")
                        .WithOne("MtdFilterOwner")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdFilterOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owner_filter");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterScript", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdForm")
                        .WithMany("MtdFilterScript")
                        .HasForeignKey("MtdFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_script_filter");

                    b.Navigation("MtdForm");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterScriptApply", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilter", "MtdFilter")
                        .WithMany("MtdFilterScriptApply")
                        .HasForeignKey("MtdFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_script_filter_apply1");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilterScript", "MtdFilterScript")
                        .WithMany("MtdFilterScriptApply")
                        .HasForeignKey("MtdFilterScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_script_filter_apply2");

                    b.Navigation("MtdFilter");

                    b.Navigation("MtdFilterScript");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdForm", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdCategoryForm", "MtdCategoryNavigation")
                        .WithMany("MtdForm")
                        .HasForeignKey("MtdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_category");

                    b.Navigation("MtdCategoryNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormDesk", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormDesk")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdFormDesk", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_form_des_mtd_from");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormHeader", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormHeader")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdFormHeader", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_form");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPart", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFormParts")
                        .HasForeignKey("MtdFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_form_part_mtd_form1");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdSysStyle", "MtdSysStyleNavigation")
                        .WithMany("MtdFormPart")
                        .HasForeignKey("MtdSysStyle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_form_part_mtd_sys_style1");

                    b.Navigation("MtdFormNavigation");

                    b.Navigation("MtdSysStyleNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPartField", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPart", "MtdFormPartNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdFormPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_form_part_field_mtd_form_part1");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdSysType", "MtdSysTypeNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdSysType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_form_part_field_mtd_sys_type1");

                    b.Navigation("MtdFormPartNavigation");

                    b.Navigation("MtdSysTypeNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPartHeader", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPart", "IdNavigation")
                        .WithOne("MtdFormPartHeader")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdFormPartHeader", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_form_part");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormRelated", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdChildForm")
                        .WithMany("MtdChildForms")
                        .HasForeignKey("ChildFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_child_form");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdParentForm")
                        .WithMany("MtdParentForms")
                        .HasForeignKey("ParentFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parent_form");

                    b.Navigation("MtdChildForm");

                    b.Navigation("MtdParentForm");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdLogApproval", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("MtdStore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_log_approval_store");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdApprovalStage", "StageNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("Stage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_log_approval_stage");

                    b.Navigation("MtdStoreNavigation");

                    b.Navigation("StageNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdLogDocument", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogDocument")
                        .HasForeignKey("MtdStore")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_log_document_store");

                    b.Navigation("MtdStoreNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyForms", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdPolicyForms")
                        .HasForeignKey("MtdForm")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_forms_form");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdPolicy", "MtdPolicyNavigation")
                        .WithMany("MtdPolicyForms")
                        .HasForeignKey("MtdPolicy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_forms_policy");

                    b.Navigation("MtdFormNavigation");

                    b.Navigation("MtdPolicyNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyParts", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPart", "MtdFormPartNavigation")
                        .WithMany("MtdPolicyParts")
                        .HasForeignKey("MtdFormPart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_part_part");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdPolicy", "MtdPolicyNavigation")
                        .WithMany("MtdPolicyParts")
                        .HasForeignKey("MtdPolicy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_part_policy");

                    b.Navigation("MtdFormPartNavigation");

                    b.Navigation("MtdPolicyNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicyScripts", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFilterScript", "MtdFilterScript")
                        .WithMany("MtdPolicyScripts")
                        .HasForeignKey("MtdFilterScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_filter");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdPolicy", "MtdPolicy")
                        .WithMany("MtdPolicyScripts")
                        .HasForeignKey("MtdPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_policy_script");

                    b.Navigation("MtdFilterScript");

                    b.Navigation("MtdPolicy");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStore", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdStore")
                        .HasForeignKey("MtdFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mtd_store_mtd_form1");

                    b.Navigation("MtdFormNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreApproval", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreApproval")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdStoreApproval", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_store_approve");

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdApprovalStage", "MtdApproveStageNavigation")
                        .WithMany("MtdStoreApproval")
                        .HasForeignKey("MtdApproveStage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_store_approve_stage");

                    b.Navigation("IdNavigation");

                    b.Navigation("MtdApproveStageNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreDate", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreDates")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreDates")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreDecimal", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreDecimals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreDecimals")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreFile", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreFiles")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreFiles")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreInt", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreInts")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreInts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreMemo", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreMemos")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreMemos")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreOwner", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreOwner")
                        .HasForeignKey("MtdKey.OrderMaker.Entity.MtdStoreOwner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owner_store");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStoreText", b =>
                {
                    b.HasOne("MtdKey.OrderMaker.Entity.MtdFormPartField", "MtdFormPartField")
                        .WithMany("MtdStoreTexts")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MtdKey.OrderMaker.Entity.MtdStore", "MtdStore")
                        .WithMany("MtdStoreTexts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApproval", b =>
                {
                    b.Navigation("MtdApprovalStages");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdApprovalStage", b =>
                {
                    b.Navigation("MtdApprovalRejection");

                    b.Navigation("MtdApprovalResolution");

                    b.Navigation("MtdLogApproval");

                    b.Navigation("MtdStoreApproval");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdCategoryForm", b =>
                {
                    b.Navigation("MtdForm");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilter", b =>
                {
                    b.Navigation("MtdFilterColumns");

                    b.Navigation("MtdFilterDate");

                    b.Navigation("MtdFilterFields");

                    b.Navigation("MtdFilterOwner");

                    b.Navigation("MtdFilterScriptApply");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFilterScript", b =>
                {
                    b.Navigation("MtdFilterScriptApply");

                    b.Navigation("MtdPolicyScripts");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdForm", b =>
                {
                    b.Navigation("MtdApproval");

                    b.Navigation("MtdChildForms");

                    b.Navigation("MtdEventSubscribes");

                    b.Navigation("MtdFilter");

                    b.Navigation("MtdFilterScript");

                    b.Navigation("MtdFormDesk");

                    b.Navigation("MtdFormHeader");

                    b.Navigation("MtdFormParts");

                    b.Navigation("MtdParentForms");

                    b.Navigation("MtdPolicyForms");

                    b.Navigation("MtdStore");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPart", b =>
                {
                    b.Navigation("MtdFormPartField");

                    b.Navigation("MtdFormPartHeader");

                    b.Navigation("MtdPolicyParts");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdFormPartField", b =>
                {
                    b.Navigation("MtdFilterColumn");

                    b.Navigation("MtdFilterField");

                    b.Navigation("MtdStoreDates");

                    b.Navigation("MtdStoreDecimals");

                    b.Navigation("MtdStoreFiles");

                    b.Navigation("MtdStoreInts");

                    b.Navigation("MtdStoreMemos");

                    b.Navigation("MtdStoreTexts");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdPolicy", b =>
                {
                    b.Navigation("MtdPolicyForms");

                    b.Navigation("MtdPolicyParts");

                    b.Navigation("MtdPolicyScripts");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdStore", b =>
                {
                    b.Navigation("MtdLogApproval");

                    b.Navigation("MtdLogDocument");

                    b.Navigation("MtdStoreApproval");

                    b.Navigation("MtdStoreDates");

                    b.Navigation("MtdStoreDecimals");

                    b.Navigation("MtdStoreFiles");

                    b.Navigation("MtdStoreInts");

                    b.Navigation("MtdStoreMemos");

                    b.Navigation("MtdStoreOwner");

                    b.Navigation("MtdStoreTexts");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysStyle", b =>
                {
                    b.Navigation("MtdFormPart");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysTerm", b =>
                {
                    b.Navigation("MtdFilterField");
                });

            modelBuilder.Entity("MtdKey.OrderMaker.Entity.MtdSysType", b =>
                {
                    b.Navigation("MtdFormPartField");
                });
#pragma warning restore 612, 618
        }
    }
}
