@*
    MTD OrderMaker - http://mtdkey.com
    Copyright (c) 2019 Oleg Bruev <job4bruev@gmail.com>. All rights reserved.
*@

@model Models.Index.RowsModelView
@inject Services.UserHandler userHandler;

@using MtdKey.OrderMaker.Core
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<SharedResource> Localizer

@{
    int colSpan = Model.FieldsCount + 2;
    var user = await userHandler.GetUserAsync(User);
}

<input id="nav-store-ids" type="hidden" value="" />

<div class="mtd-desk">
    <div class="mtd-desk-panel">

        @if (Model.IsCreator)
        {
            <div id="indexCreator" class="mtd-index-header-creator">
                <button id="index-create-button" mtd-data-url="/workplace/store/create?formId=@Model.FormId" class="mdc-fab mdc-fab--extended">
                    <div class="mdc-fab__ripple"></div>
                    <span class="material-icons mdc-fab__icon">add</span>
                    <span class="mdc-fab__label">@Localizer["Create"]</span>
                </button>
                <button id="index-create-button-mini" mtd-data-url="/workplace/store/create?formId=@Model.FormId" class="mdc-fab">
                    <div class="mdc-fab__ripple"></div>
                    <span class="material-icons mdc-fab__icon">add</span>
                </button>
            </div>
        }

        <div style="flex-grow: 1; padding-top: 38px;">
            @await Html.PartialAsync("./_buttons.cshtml")
        </div>

    </div>


    <div class="mtd-index-header" style="display: flex; position:relative">
        <div class="mtd-index-header-search">
            <form mtd-data-form method="post" action="~/api/index/search/text" enctype="multipart/form-data" autocomplete='off'>
                @Html.AntiForgeryToken()
                <input asp-for="@Model.FormId" name="indexForm" value="@Model.FormId" id="indexForm" hidden />
                @await Html.PartialAsync("./_inputSearch.cshtml")
            </form>
        </div>
    </div>


    @await Component.InvokeAsync("IndexFilterDisplay", new { formId = Model.FormId })
    @await Component.InvokeAsync("IndexFilterSelector", new { formId = Model.FormId })
    @await Component.InvokeAsync("IndexFilterColumns", new { formId = Model.FormId })

</div>


@{
    string shownumber = Model.ShowNumber ? string.Empty : "hidden";
    string showdate = Model.ShowDate ? string.Empty : "hidden";
}

<form mtd-data-form method="post" action="~/api/index/sort">
    @Html.AntiForgeryToken()
    <input type="hidden" name="formId" value="@Model.FormId" />
    <input type="hidden" name="order" id="indexOrder" value="asc" />
    <input type="hidden" mtd-data-clicker id="clickerSort" name="field" />
</form>

<div class="mtd-index-rows">
    <div style="margin: 0 auto; left: 50%;">
        <table>
            <thead>
                <tr>
                    <th @shownumber>
                        <div class="d-flex">
                            <div>
                                <form mtd-data-form method="post" action="~/api/index/search/number" enctype="multipart/form-data" style="width: 100%" autocomplete='off'>
                                    @Html.AntiForgeryToken()
                                    <input name="formId" asp-for="@Model.FormId" type="hidden" />
                                    @await Html.PartialAsync("./_numberSearch.cshtml")
                                </form>
                            </div>
                            <button data-sort="number" data-order="asc">
                                <i class="bi bi-sort-down-alt"></i>
                            </button>
                            <button data-sort="number" data-order="desc">
                                <i class="bi bi-sort-up"></i>
                            </button>
                        </div>
                    </th>

                    <th @showdate>
                        <div class="d-flex align-items-center">
                            <span>
                                @Localizer["Date of creation"]
                            </span>
                            <button data-sort="date" data-order="asc">
                                <i class="bi bi-sort-down-alt"></i>
                            </button>
                            <button data-sort="date" data-order="desc">
                                <i class="bi bi-sort-up"></i>
                            </button>
                        </div>
                    </th>

                    @if (Model.MtdApproval != null)
                    {
                        <th>
                            <div class="d-flex align-items-center">
                                <div style="text-align: center">
                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle">timeline</i>
                                </div>
                                <button data-sort="approval" data-order="asc">
                                    <i class="bi bi-sort-down-alt"></i>
                                </button>
                                <button data-sort="approval" data-order="desc">
                                    <i class="bi bi-sort-up"></i>
                                </button>
                            </div>
                        </th>
                    }
                    @{
                        var fields = Model.DocList.FirstOrDefault()?.Fields?.OrderBy(x => x.IndexSequence).ToList() ?? new();
                    }
                    @foreach (var item in fields)
                    {
                        <th>
                            <div class="d-flex align-items-center">
                                <div>@item.Name</div>

                                <button data-sort="field-@item.Id" data-order="asc">
                                    <i class="bi bi-sort-down-alt"></i>
                                </button>
                                <button data-sort="field-@item.Id" data-order="desc">
                                    <i class="bi bi-sort-up"></i>
                                </button>
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var store in Model.DocList)
                {
                    <tr mtd-data-url="/workplace/store/details?id=@store.Id">

                        <td @shownumber>
                            <div style="align-self: center">
                                @store.Sequence.ToString("D9")
                            </div>
                        </td>
                        <td @showdate>
                            <span>@store.Created.ToShortDateString()</span>
                        </td>
                        @if (Model.MtdApproval != null)
                        {
                            <td>
                                <div style="display:flex; align-content:center;">
                                    @{
                                        ApprovalStore aps = Model.ApprovalStores.Where(x => x.StoreId == store.Id).FirstOrDefault();
                                        ApprovalStatus status = aps.Status;
                                        if ((status == ApprovalStatus.Start) && aps.OwnerId == user.Id) { status = ApprovalStatus.Required; }
                                    }

                                    @switch (status)
                                    {
                                        case ApprovalStatus.Approved:
                                            {
                                                if (Model.MtdApproval.ImgApproved == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: green;">thumb_up</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgApproved,
                            imgType = Model.MtdApproval.ImgApprovedType
                            })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Iteraction:
                                            {
                                                if (Model.MtdApproval.ImgIteraction == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: darkred">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgIteraction,
                            imgType = Model.MtdApproval.ImgIteractionType
                            })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Rejected:
                                            {
                                                if (Model.MtdApproval.ImgRejected == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle">thumb_down</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgRejected,
                            imgType = Model.MtdApproval.ImgRejectedType
                            })
                                                }
                                                break;
                                            }
                                        case ApprovalStatus.Required:
                                            {
                                                if (Model.MtdApproval.ImgRequired == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: red;">hourglass_top</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgRequired,
                            imgType = Model.MtdApproval.ImgRequiredType
                            })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Start:
                                            {
                                                if (Model.MtdApproval.ImgStart == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgStart,
                            imgType = Model.MtdApproval.ImgStartType
                            })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Waiting:
                                            {
                                                if (Model.MtdApproval.ImgWaiting == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">hourglass_top</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                            {
                            maxHeight = 24,
                            maxWidth = 24,
                            imgArray = Model.MtdApproval.ImgWaiting,
                            imgType = Model.MtdApproval.ImgWaitingType
                            })
                                                }
                                                break;
                                            }
                                    }
                                </div>
                            </td>
                        }

                        @foreach (var field in store.Fields.OrderBy(x=>x.IndexSequence))
                        {
                            <td>
                                <div style="padding: 2px; word-break:break-word;">
                                    @await Component.InvokeAsync("IndexCell", field)
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

@if (Model.DocList.Count >= Model.PageSize || Model.PageCurrent > 1)
{
    @await Component.InvokeAsync("IndexFooter", new { formId = Model.FormId, pageCount = Model.PageCount })
}
